[{"C:\\Users\\Administrator\\Documents\\boilerplate-mern-stack-master\\client\\src\\index.js":"1","C:\\Users\\Administrator\\Documents\\boilerplate-mern-stack-master\\client\\src\\_reducers\\index.js":"2","C:\\Users\\Administrator\\Documents\\boilerplate-mern-stack-master\\client\\src\\_reducers\\user_reducer.js":"3","C:\\Users\\Administrator\\Documents\\boilerplate-mern-stack-master\\client\\src\\serviceWorker.js":"4","C:\\Users\\Administrator\\Documents\\boilerplate-mern-stack-master\\client\\src\\components\\App.js":"5","C:\\Users\\Administrator\\Documents\\boilerplate-mern-stack-master\\client\\src\\_actions\\types.js":"6","C:\\Users\\Administrator\\Documents\\boilerplate-mern-stack-master\\client\\src\\components\\views\\LandingPage\\LandingPage.js":"7","C:\\Users\\Administrator\\Documents\\boilerplate-mern-stack-master\\client\\src\\components\\views\\LoginPage\\LoginPage.js":"8","C:\\Users\\Administrator\\Documents\\boilerplate-mern-stack-master\\client\\src\\components\\views\\RegisterPage\\RegisterPage.js":"9","C:\\Users\\Administrator\\Documents\\boilerplate-mern-stack-master\\client\\src\\hoc\\auth.js":"10","C:\\Users\\Administrator\\Documents\\boilerplate-mern-stack-master\\client\\src\\components\\views\\Footer\\Footer.js":"11","C:\\Users\\Administrator\\Documents\\boilerplate-mern-stack-master\\client\\src\\components\\views\\NavBar\\NavBar.js":"12","C:\\Users\\Administrator\\Documents\\boilerplate-mern-stack-master\\client\\src\\_actions\\user_actions.js":"13","C:\\Users\\Administrator\\Documents\\boilerplate-mern-stack-master\\client\\src\\components\\views\\NavBar\\Sections\\RightMenu.js":"14","C:\\Users\\Administrator\\Documents\\boilerplate-mern-stack-master\\client\\src\\components\\views\\NavBar\\Sections\\LeftMenu.js":"15","C:\\Users\\Administrator\\Documents\\boilerplate-mern-stack-master\\client\\src\\components\\Config.js":"16","C:\\Users\\Administrator\\Documents\\boilerplate-mern-stack-master\\client\\src\\components\\views\\LandingPage\\Sections\\MainImage.js":"17","C:\\Users\\Administrator\\Documents\\boilerplate-mern-stack-master\\client\\src\\components\\views\\commons\\GridCards.js":"18","C:\\Users\\Administrator\\Documents\\boilerplate-mern-stack-master\\client\\src\\components\\views\\MovieDetail\\MovieDetail.js":"19","C:\\Users\\Administrator\\Documents\\boilerplate-mern-stack-master\\client\\src\\components\\views\\MovieDetail\\Sections\\MovieInfo.js":"20","C:\\Users\\Administrator\\Documents\\boilerplate-mern-stack-master\\client\\src\\components\\views\\MovieDetail\\Sections\\Favorite.js":"21","C:\\Users\\Administrator\\Documents\\boilerplate-mern-stack-master\\client\\src\\components\\views\\FavoritePage\\FavoritePage.js":"22"},{"size":1187,"mtime":1596616099000,"results":"23","hashOfConfig":"24"},{"size":157,"mtime":1596616099000,"results":"25","hashOfConfig":"24"},{"size":533,"mtime":1596616099000,"results":"26","hashOfConfig":"24"},{"size":4951,"mtime":1596616099000,"results":"27","hashOfConfig":"24"},{"size":1337,"mtime":1611216997904,"results":"28","hashOfConfig":"24"},{"size":166,"mtime":1596616099000,"results":"29","hashOfConfig":"24"},{"size":2471,"mtime":1611203795944,"results":"30","hashOfConfig":"24"},{"size":5091,"mtime":1611190157659,"results":"31","hashOfConfig":"24"},{"size":6254,"mtime":1596616099000,"results":"32","hashOfConfig":"24"},{"size":1455,"mtime":1596616099000,"results":"33","hashOfConfig":"24"},{"size":382,"mtime":1611190179576,"results":"34","hashOfConfig":"24"},{"size":1312,"mtime":1611190167195,"results":"35","hashOfConfig":"24"},{"size":1034,"mtime":1596616099000,"results":"36","hashOfConfig":"24"},{"size":1095,"mtime":1596616099000,"results":"37","hashOfConfig":"24"},{"size":390,"mtime":1611217276352,"results":"38","hashOfConfig":"24"},{"size":264,"mtime":1611130606006,"results":"39","hashOfConfig":"24"},{"size":915,"mtime":1611132406920,"results":"40","hashOfConfig":"24"},{"size":827,"mtime":1611203860147,"results":"41","hashOfConfig":"24"},{"size":2851,"mtime":1611206957294,"results":"42","hashOfConfig":"24"},{"size":1012,"mtime":1611203018432,"results":"43","hashOfConfig":"24"},{"size":2748,"mtime":1611215563463,"results":"44","hashOfConfig":"24"},{"size":2490,"mtime":1611279437085,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"1o4nbxk",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"48"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"48"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"48"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"48"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"48"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"48"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"48"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"48"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"48"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Administrator\\Documents\\boilerplate-mern-stack-master\\client\\src\\index.js",[],["100","101"],"C:\\Users\\Administrator\\Documents\\boilerplate-mern-stack-master\\client\\src\\_reducers\\index.js",[],"C:\\Users\\Administrator\\Documents\\boilerplate-mern-stack-master\\client\\src\\_reducers\\user_reducer.js",["102"],"import {\n    LOGIN_USER,\n    REGISTER_USER,\n    AUTH_USER,\n    LOGOUT_USER,\n} from '../_actions/types';\n \n\nexport default function(state={},action){\n    switch(action.type){\n        case REGISTER_USER:\n            return {...state, register: action.payload }\n        case LOGIN_USER:\n            return { ...state, loginSucces: action.payload }\n        case AUTH_USER:\n            return {...state, userData: action.payload }\n        case LOGOUT_USER:\n            return {...state }\n        default:\n            return state;\n    }\n}","C:\\Users\\Administrator\\Documents\\boilerplate-mern-stack-master\\client\\src\\serviceWorker.js",[],"C:\\Users\\Administrator\\Documents\\boilerplate-mern-stack-master\\client\\src\\components\\App.js",[],"C:\\Users\\Administrator\\Documents\\boilerplate-mern-stack-master\\client\\src\\_actions\\types.js",[],"C:\\Users\\Administrator\\Documents\\boilerplate-mern-stack-master\\client\\src\\components\\views\\LandingPage\\LandingPage.js",["103"],"import React, { useEffect, useState } from 'react'\nimport { API_URL, API_KEY, IMAGE_BASE_URL } from '../../Config';\nimport MainImage from './Sections/MainImage';\nimport GridCards from '../commons/GridCards';\nimport { Row } from 'antd';\n\nfunction LandingPage() {\n\n    const [Movies, setMovies] = useState([])\n    const [MainMovieImage, setMainMovieImage] = useState(null)\n    const [CurrentPage, setCurrentPage] = useState(null)\n\n    useEffect(() => {\n        const endpoint = `${API_URL}movie/popular?api_key=${API_KEY}&language=en-US&page=1`;\n        fetchMovies(endpoint);\n        \n    }, [])\n\n    const fetchMovies = (endpoint) => {\n        fetch(endpoint)\n            .then(response => response.json())\n            .then(response => {\n                setMovies([...Movies, ...response.results])\n                setMainMovieImage(response.results[0])\n                setCurrentPage(response.page)\n            })\n    }\n\n    const loadMoreItems = () => {\n        const endpoint = `${API_URL}movie/popular?api_key=${API_KEY}&language=en-US&page=${CurrentPage+1}`;\n        fetchMovies(endpoint);\n    }\n\n    return (\n        <div style={{width: '100%', margin:'0'}}>\n\n            {/* Main image */}\n            {MainMovieImage && //MainMovieImage가 있으면 아래 코드 수행\n                <MainImage image={`${IMAGE_BASE_URL}w1280${MainMovieImage.backdrop_path}`}\n                title={MainMovieImage.original_title}\n                text={MainMovieImage.overview}\n                />\n            }\n            <div style={{width: '85%', margin:'1rem auto'}}>\n\n                <h2>Movies by latest</h2>\n                <hr />\n\n            {/* Movie Grid Cards */}\n            <Row gutter={[16,16]}>\n            {Movies && Movies.map((movie, index) => ( //Movies가 있으면 아래 코드 수행\n                <React.Fragment key={index}>\n                    <GridCards image={movie.poster_path ? \n                            `${IMAGE_BASE_URL}w500${movie.poster_path}` : null}\n                            movieId={movie.id}\n                            movieName={movie.original_title}\n                            landingPage\n                    />\n                </React.Fragment>\n            )) \n            }\n            </Row>\n            </div>\n\n            <div style={{ display: 'flex', justifyContent: 'center' }}>\n                <button onClick={loadMoreItems}> Load More </button>\n            </div>\n\n        </div>\n    )\n}\n\nexport default LandingPage\n","C:\\Users\\Administrator\\Documents\\boilerplate-mern-stack-master\\client\\src\\components\\views\\LoginPage\\LoginPage.js",["104","105"],"import React, { useState } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { loginUser } from \"../../../_actions/user_actions\";\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { Form, Input, Button, Checkbox, Typography, Icon } from 'antd';\nimport { useDispatch } from \"react-redux\";\n\nconst { Title } = Typography;\n\nfunction LoginPage(props) {\n  const dispatch = useDispatch();\n  const rememberMeChecked = localStorage.getItem(\"rememberMe\") ? true : false;\n\n  const [formErrorMessage, setFormErrorMessage] = useState('')\n  const [rememberMe, setRememberMe] = useState(rememberMeChecked)\n\n  const handleRememberMe = () => {\n    setRememberMe(!rememberMe)\n  };\n\n  const initialEmail = localStorage.getItem(\"rememberMe\") ? localStorage.getItem(\"rememberMe\") : '';\n\n  return (\n    <Formik\n      initialValues={{\n        email: initialEmail,\n        password: '',\n      }}\n      validationSchema={Yup.object().shape({\n        email: Yup.string()\n          .email('Email is invalid')\n          .required('Email is required'),\n        password: Yup.string()\n          .min(6, 'Password must be at least 6 characters')\n          .required('Password is required'),\n      })}\n      onSubmit={(values, { setSubmitting }) => {\n        setTimeout(() => {\n          let dataToSubmit = {\n            email: values.email,\n            password: values.password\n          };\n\n          dispatch(loginUser(dataToSubmit))\n            .then(response => {\n              if (response.payload.loginSuccess) {\n                window.localStorage.setItem('userId', response.payload.userId);\n                if (rememberMe === true) {\n                  window.localStorage.setItem('rememberMe', values.id);\n                } else {\n                  localStorage.removeItem('rememberMe');\n                }\n                props.history.push(\"/\");\n              } else {\n                setFormErrorMessage('Check out your Account or Password again')\n              }\n            })\n            .catch(err => {\n              setFormErrorMessage('Check out your Account or Password again')\n              setTimeout(() => {\n                setFormErrorMessage(\"\")\n              }, 3000);\n            });\n          setSubmitting(false);\n        }, 500);\n      }}\n    >\n      {props => {\n        const {\n          values,\n          touched,\n          errors,\n          dirty,\n          isSubmitting,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n          handleReset,\n        } = props;\n        return (\n          <div className=\"app\">\n\n            <Title level={2}>Log In</Title>\n            <form onSubmit={handleSubmit} style={{ width: '350px' }}>\n\n              <Form.Item required>\n                <Input\n                  id=\"email\"\n                  prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                  placeholder=\"Enter your email\"\n                  type=\"email\"\n                  value={values.email}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  className={\n                    errors.email && touched.email ? 'text-input error' : 'text-input'\n                  }\n                />\n                {errors.email && touched.email && (\n                  <div className=\"input-feedback\">{errors.email}</div>\n                )}\n              </Form.Item>\n\n              <Form.Item required>\n                <Input\n                  id=\"password\"\n                  prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                  placeholder=\"Enter your password\"\n                  type=\"password\"\n                  value={values.password}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  className={\n                    errors.password && touched.password ? 'text-input error' : 'text-input'\n                  }\n                />\n                {errors.password && touched.password && (\n                  <div className=\"input-feedback\">{errors.password}</div>\n                )}\n              </Form.Item>\n\n              {formErrorMessage && (\n                <label ><p style={{ color: '#ff0000bf', fontSize: '0.7rem', border: '1px solid', padding: '1rem', borderRadius: '10px' }}>{formErrorMessage}</p></label>\n              )}\n\n              <Form.Item>\n                <Checkbox id=\"rememberMe\" onChange={handleRememberMe} checked={rememberMe} >Remember me</Checkbox>\n                <a className=\"login-form-forgot\" href=\"/reset_user\" style={{ float: 'right' }}>\n                  forgot password\n                  </a>\n                <div>\n                  <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\" style={{ minWidth: '100%' }} disabled={isSubmitting} onSubmit={handleSubmit}>\n                    Log in\n                </Button>\n                </div>\n                Or <a href=\"/register\">register now!</a>\n              </Form.Item>\n            </form>\n          </div>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default withRouter(LoginPage);\n\n\n","C:\\Users\\Administrator\\Documents\\boilerplate-mern-stack-master\\client\\src\\components\\views\\RegisterPage\\RegisterPage.js",["106","107"],"import React from \"react\";\nimport moment from \"moment\";\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { registerUser } from \"../../../_actions/user_actions\";\nimport { useDispatch } from \"react-redux\";\n\nimport {\n  Form,\n  Input,\n  Button,\n} from 'antd';\n\nconst formItemLayout = {\n  labelCol: {\n    xs: { span: 24 },\n    sm: { span: 8 },\n  },\n  wrapperCol: {\n    xs: { span: 24 },\n    sm: { span: 16 },\n  },\n};\nconst tailFormItemLayout = {\n  wrapperCol: {\n    xs: {\n      span: 24,\n      offset: 0,\n    },\n    sm: {\n      span: 16,\n      offset: 8,\n    },\n  },\n};\n\nfunction RegisterPage(props) {\n  const dispatch = useDispatch();\n  return (\n\n    <Formik\n      initialValues={{\n        email: '',\n        lastName: '',\n        name: '',\n        password: '',\n        confirmPassword: ''\n      }}\n      validationSchema={Yup.object().shape({\n        name: Yup.string()\n          .required('Name is required'),\n        lastName: Yup.string()\n          .required('Last Name is required'),\n        email: Yup.string()\n          .email('Email is invalid')\n          .required('Email is required'),\n        password: Yup.string()\n          .min(6, 'Password must be at least 6 characters')\n          .required('Password is required'),\n        confirmPassword: Yup.string()\n          .oneOf([Yup.ref('password'), null], 'Passwords must match')\n          .required('Confirm Password is required')\n      })}\n      onSubmit={(values, { setSubmitting }) => {\n        setTimeout(() => {\n\n          let dataToSubmit = {\n            email: values.email,\n            password: values.password,\n            name: values.name,\n            lastname: values.lastname,\n            image: `http://gravatar.com/avatar/${moment().unix()}?d=identicon`\n          };\n\n          dispatch(registerUser(dataToSubmit)).then(response => {\n            if (response.payload.success) {\n              props.history.push(\"/login\");\n            } else {\n              alert(response.payload.err.errmsg)\n            }\n          })\n\n          setSubmitting(false);\n        }, 500);\n      }}\n    >\n      {props => {\n        const {\n          values,\n          touched,\n          errors,\n          dirty,\n          isSubmitting,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n          handleReset,\n        } = props;\n        return (\n          <div className=\"app\">\n            <h2>Sign up</h2>\n            <Form style={{ minWidth: '375px' }} {...formItemLayout} onSubmit={handleSubmit} >\n\n              <Form.Item required label=\"Name\">\n                <Input\n                  id=\"name\"\n                  placeholder=\"Enter your name\"\n                  type=\"text\"\n                  value={values.name}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  className={\n                    errors.name && touched.name ? 'text-input error' : 'text-input'\n                  }\n                />\n                {errors.name && touched.name && (\n                  <div className=\"input-feedback\">{errors.name}</div>\n                )}\n              </Form.Item>\n\n              <Form.Item required label=\"Last Name\">\n                <Input\n                  id=\"lastName\"\n                  placeholder=\"Enter your Last Name\"\n                  type=\"text\"\n                  value={values.lastName}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  className={\n                    errors.lastName && touched.lastName ? 'text-input error' : 'text-input'\n                  }\n                />\n                {errors.lastName && touched.lastName && (\n                  <div className=\"input-feedback\">{errors.lastName}</div>\n                )}\n              </Form.Item>\n\n              <Form.Item required label=\"Email\" hasFeedback validateStatus={errors.email && touched.email ? \"error\" : 'success'}>\n                <Input\n                  id=\"email\"\n                  placeholder=\"Enter your Email\"\n                  type=\"email\"\n                  value={values.email}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  className={\n                    errors.email && touched.email ? 'text-input error' : 'text-input'\n                  }\n                />\n                {errors.email && touched.email && (\n                  <div className=\"input-feedback\">{errors.email}</div>\n                )}\n              </Form.Item>\n\n              <Form.Item required label=\"Password\" hasFeedback validateStatus={errors.password && touched.password ? \"error\" : 'success'}>\n                <Input\n                  id=\"password\"\n                  placeholder=\"Enter your password\"\n                  type=\"password\"\n                  value={values.password}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  className={\n                    errors.password && touched.password ? 'text-input error' : 'text-input'\n                  }\n                />\n                {errors.password && touched.password && (\n                  <div className=\"input-feedback\">{errors.password}</div>\n                )}\n              </Form.Item>\n\n              <Form.Item required label=\"Confirm\" hasFeedback>\n                <Input\n                  id=\"confirmPassword\"\n                  placeholder=\"Enter your confirmPassword\"\n                  type=\"password\"\n                  value={values.confirmPassword}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  className={\n                    errors.confirmPassword && touched.confirmPassword ? 'text-input error' : 'text-input'\n                  }\n                />\n                {errors.confirmPassword && touched.confirmPassword && (\n                  <div className=\"input-feedback\">{errors.confirmPassword}</div>\n                )}\n              </Form.Item>\n\n              <Form.Item {...tailFormItemLayout}>\n                <Button onClick={handleSubmit} type=\"primary\" disabled={isSubmitting}>\n                  Submit\n                </Button>\n              </Form.Item>\n            </Form>\n          </div>\n        );\n      }}\n    </Formik>\n  );\n};\n\n\nexport default RegisterPage\n","C:\\Users\\Administrator\\Documents\\boilerplate-mern-stack-master\\client\\src\\hoc\\auth.js",["108"],"/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect } from 'react';\nimport { auth } from '../_actions/user_actions';\nimport { useSelector, useDispatch } from \"react-redux\";\n\nexport default function (SpecificComponent, option, adminRoute = null) {\n    function AuthenticationCheck(props) {\n\n        let user = useSelector(state => state.user);\n        const dispatch = useDispatch();\n\n        useEffect(() => {\n            //To know my current status, send Auth request \n            dispatch(auth()).then(response => {\n                //Not Loggined in Status \n                if (!response.payload.isAuth) {\n                    if (option) {\n                        props.history.push('/login')\n                    }\n                    //Loggined in Status \n                } else {\n                    //supposed to be Admin page, but not admin person wants to go inside\n                    if (adminRoute && !response.payload.isAdmin) {\n                        props.history.push('/')\n                    }\n                    //Logged in Status, but Try to go into log in page \n                    else {\n                        if (option === false) {\n                            props.history.push('/')\n                        }\n                    }\n                }\n            })\n\n        }, [])\n\n        return (\n            <SpecificComponent {...props} user={user} />\n        )\n    }\n    return AuthenticationCheck\n}\n\n\n","C:\\Users\\Administrator\\Documents\\boilerplate-mern-stack-master\\client\\src\\components\\views\\Footer\\Footer.js",[],"C:\\Users\\Administrator\\Documents\\boilerplate-mern-stack-master\\client\\src\\components\\views\\NavBar\\NavBar.js",[],"C:\\Users\\Administrator\\Documents\\boilerplate-mern-stack-master\\client\\src\\_actions\\user_actions.js",[],"C:\\Users\\Administrator\\Documents\\boilerplate-mern-stack-master\\client\\src\\components\\views\\NavBar\\Sections\\RightMenu.js",[],"C:\\Users\\Administrator\\Documents\\boilerplate-mern-stack-master\\client\\src\\components\\views\\NavBar\\Sections\\LeftMenu.js",["109","110"],"import React from 'react';\nimport { Menu } from 'antd';\nconst SubMenu = Menu.SubMenu;\nconst MenuItemGroup = Menu.ItemGroup;\n\nfunction LeftMenu(props) {\n  return (\n    <Menu mode={props.mode}>\n    <Menu.Item key=\"mail\">\n      <a href=\"/\">Home</a>\n    </Menu.Item>\n    <Menu.Item key=\"favorite\">\n      <a href=\"/favorite\">Favorite</a>\n    </Menu.Item>\n  </Menu>\n  )\n}\n\nexport default LeftMenu","C:\\Users\\Administrator\\Documents\\boilerplate-mern-stack-master\\client\\src\\components\\Config.js",[],"C:\\Users\\Administrator\\Documents\\boilerplate-mern-stack-master\\client\\src\\components\\views\\LandingPage\\Sections\\MainImage.js",[],"C:\\Users\\Administrator\\Documents\\boilerplate-mern-stack-master\\client\\src\\components\\views\\commons\\GridCards.js",[],"C:\\Users\\Administrator\\Documents\\boilerplate-mern-stack-master\\client\\src\\components\\views\\MovieDetail\\MovieDetail.js",["111"],"import React, { useEffect, useState } from 'react'\r\nimport { API_KEY, API_URL, IMAGE_BASE_URL } from '../../Config'\r\nimport MainImage from '../LandingPage/Sections/MainImage'\r\nimport MovieInfo from './Sections/MovieInfo';\r\nimport GridCards from '../commons/GridCards';\r\nimport Favorite from './Sections/Favorite';\r\nimport { Row } from 'antd';\r\n\r\nfunction MovieDetail(props) {\r\n\r\n    let movieId = props.match.params.movieId\r\n\r\n    const [Movie, setMovie] = useState([])\r\n    const [Casts, setCasts] = useState([])\r\n    const [ActorToggle, setActorToggle] = useState(false)\r\n\r\n    const toggleActorView =() => {\r\n        setActorToggle(!ActorToggle)\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        let endpointCrew = `${API_URL}movie/${movieId}/credits?api_key=${API_KEY}`\r\n        let endpointInfo = `${API_URL}movie/${movieId}?api_key=${API_KEY}`\r\n\r\n        fetch(endpointInfo)\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                setMovie(response)\r\n            })\r\n            \r\n        fetch(endpointCrew)\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                setCasts(response.cast)\r\n            })\r\n\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n\r\n            {/* Header */}\r\n            <MainImage image={`${IMAGE_BASE_URL}w1280${Movie.backdrop_path}`}\r\n                title={Movie.original_title}\r\n                text={Movie.overview}\r\n            />\r\n\r\n            {/* Body */}\r\n            <div style={{ width: '85%', margin: '1rem auto'}}>\r\n\r\n                <div style={{ display: 'flex', justifyContent: 'flex-end'}}>\r\n                    <Favorite movieInfo={Movie} movieId={movieId} userFrom={localStorage.getItem('userId')}/>\r\n                </div>\r\n\r\n                {/* Movie Info */}\r\n                <MovieInfo\r\n                    movie={Movie}\r\n                />\r\n\r\n                <br />\r\n\r\n                {/* Actors Grid */}\r\n                <div style={{display: 'flex', justifyContent: 'center', margin: '2rem'}}>\r\n                    <button onClick ={toggleActorView}> Toggle Actor  view</button>\r\n                </div>\r\n\r\n                {ActorToggle &&\r\n                    <Row gutter={[16,16]}>\r\n                    {Casts && Casts.map((cast, index) => ( //Movies가 있으면 아래 코드 수행\r\n                        <React.Fragment key={index}>\r\n                            <GridCards image={cast.profile_path ? \r\n                                    `${IMAGE_BASE_URL}w500${cast.profile_path}` : null}\r\n                                    characterName={cast.name}\r\n                            />\r\n                        </React.Fragment>\r\n                    )) \r\n                    }\r\n                </Row>\r\n                }\r\n\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MovieDetail\r\n","C:\\Users\\Administrator\\Documents\\boilerplate-mern-stack-master\\client\\src\\components\\views\\MovieDetail\\Sections\\MovieInfo.js",["112"],"import React from 'react'\r\nimport { Descriptions, Badge } from 'antd';\r\n\r\nfunction MovieInfo(props) {\r\n\r\n    let { movie } = props;\r\n\r\n    return (\r\n        <Descriptions title=\"Movie Info\" bordered>\r\n            <Descriptions.Item label=\"Title\">{movie.original_title}</Descriptions.Item>\r\n            <Descriptions.Item label=\"release_date\">{movie.release_date}</Descriptions.Item>\r\n            <Descriptions.Item label=\"revenue\">{movie.revenue}</Descriptions.Item>\r\n            <Descriptions.Item label=\"runtime\">{movie.runtime}</Descriptions.Item>\r\n            <Descriptions.Item label=\"vote_average\" span={2}>\r\n                {movie.vote_average}\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"vote_count\">{movie.vote_count}</Descriptions.Item>\r\n            <Descriptions.Item label=\"status\">{movie.status}</Descriptions.Item>\r\n            <Descriptions.Item label=\"popularity\">{movie.popularity}</Descriptions.Item>\r\n        </Descriptions>\r\n    )\r\n}\r\n\r\nexport default MovieInfo\r\n","C:\\Users\\Administrator\\Documents\\boilerplate-mern-stack-master\\client\\src\\components\\views\\MovieDetail\\Sections\\Favorite.js",["113"],"import React, { useEffect, useState } from 'react'\r\nimport Axios from 'axios';\r\n\r\nfunction Favorite(props) {\r\n\r\n    const userFrom = props.userFrom;\r\n    const movieId = props.movieId;\r\n    const movieTitle = props.movieInfo.title\r\n    const moviePost = props.movieInfo.backdrop_path\r\n    const movieRunTime = props.movieInfo.runtime\r\n\r\n    const [FavoriteNumber, setFavoriteNumber] = useState(0);\r\n    const [Favorited, setFavorited] = useState(false);\r\n\r\n    let variables = {\r\n        userFrom: userFrom,\r\n        movieId: movieId,\r\n        movieTitle: movieTitle,\r\n        moviePost: moviePost,\r\n        movieRunTime: movieRunTime\r\n    }\r\n\r\n    useEffect(() => {\r\n        \r\n        Axios.post('/api/favorite/favoriteNumber', variables)\r\n            .then(response => {\r\n                if(response.data.success){\r\n                    setFavoriteNumber(response.data.favoriteNumber)\r\n                } else {\r\n                    alert('숫자 정보를 가져오는데 실패했습니다.')\r\n                }\r\n            })\r\n            \r\n            Axios.post('/api/favorite/favorited', variables)\r\n            .then(response => {\r\n                if(response.data.success){\r\n                    setFavorited(response.data.favorited)\r\n                } else {\r\n                    alert('정보를 가져오는데 실패했습니다.')\r\n                }\r\n            })\r\n\r\n    }, [])\r\n\r\n    const onClickFavorite = () => {\r\n         \r\n        // 이미 즐겨찾기 되어 있다면? remove\r\n        if(Favorited) {\r\n            Axios.post('/api/favorite/removeFromFavorite', variables)\r\n                .then(response => {\r\n                    if( response.data.success ) {\r\n                        setFavoriteNumber(FavoriteNumber - 1)\r\n                        setFavorited(!Favorited)\r\n                    } else {\r\n                        alert('Favorite 리스트에서 지우는 것을 실패했습니다.')\r\n                    }\r\n                })\r\n                \r\n            } else { // 즐겨찾기 add\r\n                \r\n                Axios.post('/api/favorite/addToFavorite', variables)\r\n                    .then(response => {\r\n                        if( response.data.success ) {\r\n                            setFavoriteNumber(FavoriteNumber + 1)\r\n                            setFavorited(!Favorited)\r\n                        } else {\r\n                            alert('Favorite 리스트에 추가하는 것을 실패했습니다.')\r\n                        }\r\n                    })\r\n            }\r\n\r\n     }\r\n\r\n    return (\r\n        <div>\r\n            <button onClick={onClickFavorite}>{Favorited? \"Not Favorite\" : \"Add  to Favorite\"} {FavoriteNumber}</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Favorite\r\n","C:\\Users\\Administrator\\Documents\\boilerplate-mern-stack-master\\client\\src\\components\\views\\FavoritePage\\FavoritePage.js",["114"],{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","severity":1,"message":"120","line":9,"column":1,"nodeType":"121","endLine":22,"endColumn":2},{"ruleId":"122","severity":1,"message":"123","line":17,"column":8,"nodeType":"124","endLine":17,"endColumn":10,"suggestions":"125"},{"ruleId":"126","severity":1,"message":"127","line":74,"column":11,"nodeType":"128","messageId":"129","endLine":74,"endColumn":16},{"ruleId":"126","severity":1,"message":"130","line":79,"column":11,"nodeType":"128","messageId":"129","endLine":79,"endColumn":22},{"ruleId":"126","severity":1,"message":"127","line":92,"column":11,"nodeType":"128","messageId":"129","endLine":92,"endColumn":16},{"ruleId":"126","severity":1,"message":"130","line":97,"column":11,"nodeType":"128","messageId":"129","endLine":97,"endColumn":22},{"ruleId":"119","severity":1,"message":"120","line":6,"column":1,"nodeType":"121","endLine":42,"endColumn":2},{"ruleId":"126","severity":1,"message":"131","line":3,"column":7,"nodeType":"128","messageId":"129","endLine":3,"endColumn":14},{"ruleId":"126","severity":1,"message":"132","line":4,"column":7,"nodeType":"128","messageId":"129","endLine":4,"endColumn":20},{"ruleId":"122","severity":1,"message":"133","line":38,"column":8,"nodeType":"124","endLine":38,"endColumn":10,"suggestions":"134"},{"ruleId":"126","severity":1,"message":"135","line":2,"column":24,"nodeType":"128","messageId":"129","endLine":2,"endColumn":29},{"ruleId":"122","severity":1,"message":"136","line":43,"column":8,"nodeType":"124","endLine":43,"endColumn":10,"suggestions":"137"},{"ruleId":"138","severity":1,"message":"139","line":52,"column":21,"nodeType":"140","endLine":52,"endColumn":79},"no-native-reassign",["141"],"no-negated-in-lhs",["142"],"import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchMovies'. Either include it or remove the dependency array.","ArrayExpression",["143"],"no-unused-vars","'dirty' is assigned a value but never used.","Identifier","unusedVar","'handleReset' is assigned a value but never used.","'SubMenu' is assigned a value but never used.","'MenuItemGroup' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'movieId'. Either include it or remove the dependency array.",["144"],"'Badge' is defined but never used.","React Hook useEffect has a missing dependency: 'variables'. Either include it or remove the dependency array.",["145"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"146","fix":"147"},{"desc":"148","fix":"149"},{"desc":"150","fix":"151"},"Update the dependencies array to be: [fetchMovies]",{"range":"152","text":"153"},"Update the dependencies array to be: [movieId]",{"range":"154","text":"155"},"Update the dependencies array to be: [variables]",{"range":"156","text":"157"},[591,593],"[fetchMovies]",[1198,1200],"[movieId]",[1329,1331],"[variables]"]